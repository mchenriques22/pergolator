package percolator

import (
	"go/types"
	"strings"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

const expected = `// Code generated by github.com/mchenriques22/pergolator, DO NOT EDIT.
package tests

import (
	"reflect"

	"github.com/antoninferrand/pergolator/tree"
)

type StructPercolator struct {
	fn func(document *Struct) bool
}

// Percolate percolates the document with the percolator's query.
// It will return a boolean indicating if the query matches the document.
func (p *StructPercolator) Percolate(document *Struct) bool {
	return p.fn(document)
}

// NewStructPercolatorConstructor is a constructor of percolators.
// Every percolator it creates will use the parser provided to the constructor.
func NewStructPercolatorConstructor(parseFn tree.ParseFn, modifiers ...tree.Modifiers) func(query string) (*StructPercolator, error) {
	return func(query string) (*StructPercolator, error) {
		return NewStructPercolator(parseFn, query, modifiers...)
	}
}

// NewStructPercolator creates a percolator with a given query and a given parser.
// It returns an error if the parsing failed.
func NewStructPercolator(parseFn tree.ParseFn, query string, modifiers ...tree.Modifiers) (*StructPercolator, error) {
	root, err := parseFn(query)
	if err != nil {
		return nil, err
	}

    for _, modifier := range modifiers {
        root = modifier(root)
        if _, isEmpty := root.(*tree.Empty); isEmpty {
            // If the query is empty, we return a percolator that always returns false
            return &StructPercolator{fn: pStructFalseFn}, nil
        }
    }

	return &StructPercolator{fn: updateNodeStruct(root)}, nil
}

func updateNodeStruct(root tree.Expr) func(document *Struct) bool {
	switch r := root.(type) {
	case *tree.And:
		fns := make([]func(document *Struct) bool, 0, len(r.Children))
		for _, child := range r.Children {
			fn := updateNodeStruct(child)

			// Optimize the case where one of the children is always false
			if reflect.ValueOf(fn).Pointer() == reflect.ValueOf(pStructFalseFn).Pointer() {
				return pStructFalseFn
			}
			fns = append(fns, fn)
		}

		return func(document *Struct) bool {
			for _, fn := range fns {
				if !fn(document) {
					return false
				}
			}
			return true
		}
	case *tree.Or:
		fns := make([]func(document *Struct) bool, 0, len(r.Children))
		for _, child := range r.Children {
			fn := updateNodeStruct(child)

			// Optimize the case where one of the children is always false
			if reflect.ValueOf(fn).Pointer() == reflect.ValueOf(pStructFalseFn).Pointer() {
				continue
			}
			fns = append(fns, fn)
		}

		if len(fns) == 0 {
			return pStructFalseFn
		}

		return func(document *Struct) bool {
			for _, fn := range fns {
				if fn(document) {
					return true
				}
			}
			return false
		}
	case *tree.Not:
		child := updateNodeStruct(r.Child)
		return func(document *Struct) bool {
			return !child(document)
		}
	case *tree.Query:
		return pStructQuery(r)
	}

	return pStructFalseFn
}
`

func TestWritePercolatorEntrypoint(t *testing.T) {
	var sb strings.Builder
	err := Write(&sb, "tests", []*types.TypeName{
		types.NewTypeName(0, types.NewPackage("", "tests"), "Struct", nil),
	})
	require.NoError(t, err)

	assert.Equal(t, expected, sb.String())
}
