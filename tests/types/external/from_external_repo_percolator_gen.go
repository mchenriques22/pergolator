// Code generated by github.com/antoninferrand/pergolator, DO NOT EDIT.
package external

import (
	"reflect"
	"strconv"
	"strings"

	"github.com/dave/jennifer/jen"

	"github.com/antoninferrand/pergolator/tree"
)

type OptionsPercolator struct {
	fn func(document *jen.Options) bool
}

// Percolate percolates the document with the percolator's query.
// It will return a boolean indicating if the query matches the document.
func (p *OptionsPercolator) Percolate(document *jen.Options) bool {
	return p.fn(document)
}

// NewOptionsPercolatorConstructor is a constructor of percolators.
// Every percolator it creates will use the parser provided to the constructor.
func NewOptionsPercolatorConstructor(parseFn tree.ParseFn, modifiers ...tree.Modifiers) func(query string) (*OptionsPercolator, error) {
	return func(query string) (*OptionsPercolator, error) {
		return NewOptionsPercolator(parseFn, query, modifiers...)
	}
}

// NewOptionsPercolator creates a percolator with a given query and a given parser.
// It returns an error if the parsing failed.
func NewOptionsPercolator(parseFn tree.ParseFn, query string, modifiers ...tree.Modifiers) (*OptionsPercolator, error) {
	root, err := parseFn(query)
	if err != nil {
		return nil, err
	}

	for _, modifier := range modifiers {
		root = modifier(root)
		if _, isEmpty := root.(*tree.Empty); isEmpty {
			// If the query is empty, we return a percolator that always returns false
			return &OptionsPercolator{fn: pOptionsFalseFn}, nil
		}
	}

	return &OptionsPercolator{fn: updateNodeOptions(root)}, nil
}

func updateNodeOptions(root tree.Expr) func(document *jen.Options) bool {
	switch r := root.(type) {
	case *tree.And:
		fns := make([]func(document *jen.Options) bool, 0, len(r.Children))
		for _, child := range r.Children {
			fn := updateNodeOptions(child)

			// Optimize the case where one of the children is always false
			if reflect.ValueOf(fn).Pointer() == reflect.ValueOf(pOptionsFalseFn).Pointer() {
				return pOptionsFalseFn
			}
			fns = append(fns, fn)
		}

		return func(document *jen.Options) bool {
			for _, fn := range fns {
				if !fn(document) {
					return false
				}
			}
			return true
		}
	case *tree.Or:
		fns := make([]func(document *jen.Options) bool, 0, len(r.Children))
		for _, child := range r.Children {
			fn := updateNodeOptions(child)

			// Optimize the case where one of the children is always false
			if reflect.ValueOf(fn).Pointer() == reflect.ValueOf(pOptionsFalseFn).Pointer() {
				continue
			}
			fns = append(fns, fn)
		}

		if len(fns) == 0 {
			return pOptionsFalseFn
		}

		return func(document *jen.Options) bool {
			for _, fn := range fns {
				if fn(document) {
					return true
				}
			}
			return false
		}
	case *tree.Not:
		child := updateNodeOptions(r.Child)
		return func(document *jen.Options) bool {
			return !child(document)
		}
	case *tree.Query:
		return pOptionsQuery(r)
	}

	return pOptionsFalseFn
}

func pOptionsQuery(query *tree.Query) func(*jen.Options) bool {
	key, suffix, _ := strings.Cut(query.Key, ".")
	_ = suffix
	switch key {
	case "Open":
		parsed := query.Value
		return func(document *jen.Options) bool {
			return document.Open == parsed
		}
	case "Close":
		parsed := query.Value
		return func(document *jen.Options) bool {
			return document.Close == parsed
		}
	case "Separator":
		parsed := query.Value
		return func(document *jen.Options) bool {
			return document.Separator == parsed
		}
	case "Multi":
		parsed, err := strconv.ParseBool(query.Value)
		if err != nil {
			return pOptionsFalseFn
		}
		return func(document *jen.Options) bool {
			return document.Multi == parsed
		}
	default:
		return pOptionsFalseFn
	}
}

func pOptionsFalseFn(_ *jen.Options) bool {
	return false
}
